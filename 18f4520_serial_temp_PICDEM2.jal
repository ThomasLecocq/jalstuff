-- ------------------------------------------------------
-- Title: Test program for print.jal
--
-- Author: Joep Suijs, Copyright (c) 2008..2011, all rights reserved.
--
-- Adapted-by: 
--
-- Compiler: >=2.4m
-- Revision: $Revision: 3043 $
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Test program
--
-- Sources:
--
-- Notes: as output, this sample produces characters on a serial link. First 
--        run serial tests to make sure serial comms works okay.
--
-- ------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_18f4550_af.jal
--    * test : test_serial_print.jal
--

;@jallib section chipdef
-- chip setup
include 18f4520

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000


-- fuses
--pragma target PLLDIV        P5          -- divide by 5 - 20MHZ_INPUT
--pragma target CPUDIV        P1          -- [primary oscillator src: /1][96 mhz pll src: /2]
--pragma target USBDIV        P2      -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
--pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       MINIMUM     -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog saler setting
pragma target WDT           DISABLED    -- no watchdog
pragma target CCP2MUX       pin_C1 --ENABLED     -- CCP2 pin C1
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          EXTERNAL    -- master reset on RE3
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           DISABLED    -- no low-voltage programming
pragma target XINST         ENABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CP2           DISABLED    -- code block 2 not protected
pragma target CP3           DISABLED    -- code block 3 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target CPD           DISABLED    -- eeprom code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRT2          DISABLED    -- table write block 2 not protected
pragma target WRT3          DISABLED    -- table write block 3 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTD          DISABLED    -- eeprom not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTR2         DISABLED    -- table read block 2 not protected
pragma target EBTR3         DISABLED    -- table read block 3 not protected
pragma target EBTRB         DISABLED    -- boot block not protected

;@jallib section led
-- LED IO definition
alias led is pin_b3
alias led_direction is pin_b3_direction
alias led2 is pin_b1
alias led2_direction is pin_b1_direction

include delay


;@jallib section lcd_hd44780_4
-- LCD IO definition
alias lcd_rs           is pin_A3              -- LCD command/data select.
alias lcd_rs_direction is pin_A3_direction
alias lcd_en           is pin_A1              -- LCD data trigger
alias lcd_en_direction is pin_A1_direction

-- NEEDED to ground RW pin, we are not going to read from LCD
alias lcd_rw           is pin_A2              -- LCD data trigger
alias lcd_rw_direction is pin_A2_direction
pin_A2_direction = output
lcd_rw = off

alias lcd_dataport is portd_high              -- LCD data  port
alias lcd_dataport_direction is portd_high_direction
const byte LCD_ROWS     = 2                     -- 2 lines
const byte LCD_CHARS    = 16                    -- 16 chars per line
pin_A4_direction =  input
pin_A3_direction        = output
pin_A1_direction        = output
portd_high_direction  = output
include lcd_hd44780_4                -- LCD library with 4 data lines
lcd_init()                           -- initialize LCD

include print                        -- formatted output library

const byte strN[] = "Hello world!"   -- define strings


lcd_cursor_position(0,0)             -- to 1st line, 1st char
print_string(lcd, strN)              -- show hello world!



-- set all IO as digital
enable_digital_io()


-- setup serial (see echo.jal for more details);@jallib section serial
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()
serial_hw_disable()
serial_hw_enable()

include format
include print
include strings
------------------

-- setup pin definitions for dallas one-wire bus
alias d1w_bus is pin_e0
alias d1w_bus_direction is pin_e0_direction
include one_wire -- include one-wire library
d1w_init() -- init one-wire bus


-- select one of the output formats below
const ds18b20_value_raw          = 0
const ds18b20_value_celcius      = 1
const ds18b20_value_farenheit    = 0

const ds18b20_ignore_crc         = 0 -- 1 tell lib to ignore crc (code becomes smaller and faster, but reliability of data is less)
const ds18b20_max_retries        = 2 -- 1 means the library re-reads once when crc fails, 4 means up to 4 retries (so max 5 reads)


include ds18b20
------------------



led_direction = output


const byte str1[] = "Hello serial !!"   -- define a string
print_string(serial_hw_data, str1)  -- output string to serial
lcd_cursor_position(0,0)
print_string(lcd, str1)  -- output string to serial
-- inform user PIC is ready !
serial_hw_write("!")

-- let's build our loop
var byte char	-- will store received char
var word counter = 10
var byte str2[] = "                "
var byte cnt = 0

var sword temperature
var bit r

forever loop
  led = on
  ds18b20_convert() -- tell all ds18b20 devices to start conversion
  delay_1ms(700)
  led = off
  r = ds18b20_s_temp(temperature) -- read conversion result
  if (r) then
    -- success, so print temperature
    --format_sword_dec(serial_hw_data, temperature, 5, 1) -- print temperature in xx.x format
    lcd_cursor_position(1,0)
    format_sword_dec(lcd, temperature, 5, 1) -- print temperature in xx.x format
    format_sword_dec(serial_hw_data, temperature, 5, 1) -- print temperature in xx.x format
    print_string(serial_hw_data, "\n")
  end if


end loop
